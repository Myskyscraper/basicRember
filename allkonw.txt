一：html

-------------------------------------------------
 html5是什么 语义化标签， 有利于seo 

 新增元素  header section  footer aside article  nav canvas  audio video figure datalist


 1 以移动设备为主 2响应是设计  3支持离线缓存技术啊manifest(CACHE MANIFEST NETWROK FALLBACK) 4:支持地理定位 5：websocket

  localstorage sessionstorage cookie

  存储方式大小：cookie 4k

  时间 ：    功能；

  1:set

  加快前端开发的：

  1：减少http请求 合并资源，压缩文件 懒加载；

  2：加快请求速度  预解析 DNS,并行加载，CDN分发;

  3: 缓存：http协议缓存，离线缓存，manifest缓存；  localStorage缓存；

  4: 渲染顺序：  js /css 优化加载顺序；




  -------------------------------------------------

 二：css 


 	1:  box-sizeing:border-box ;content-box;()

 	2: 垂直居中（方式）

 		#内敛元素： 字体，input 

 		水平：(1) text-align:center; (2父元素)display:flex; justify-content:center;

 		垂直：(1)line-height:30px;  (2)display:table-cell 设置vertical-align:middle;

 		#块状元素居中（方式）

 		定宽 margin: 0 auto;

		不定宽的话：(1) 设置display:inline (2)父元素;display:relative ; left:50%;子元素也是的；display:relative ; left:50%;


	.box {
		width: 200px;
		height: 200px;
		background: red;
		position: absolute;/*或fixed*/
		top: 50%;
		left: 50%;
		margin-top: -100px;
		margin-left: -100px;
	}

	.box{
		width: 100px;
		height: 100px;
		background: red;
		position: absolute;/*或fixed*/
		top:0;
		right:0;
		bottom:0;
		left:0;
		margin: auto;
	}


	.box{
		position: absolute;
		top:50%;
		left:50%;
		transform: translate(-50%,-50%);
		-webkit-transform: translate(-50%,-50%);
		-moz-transform: translate(-50%,-50%);
		-ms-transform: translate(-50%,-50%);
	}


	.box{
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-box;
		display: -moz-flex;
		display: -ms-flexbox;
		display: flex;
		/*水平居中*/
		-webkit-box-align: center;
		-moz-box-align: center;
		-ms-flex-pack:center;
		-webkit-justify-content: center;
		-moz-justify-content: center;
		justify-content: center;
		/*垂直居中*/
		-webkit-box-pack: center;
		-moz-box-pack: center;
		-ms-flex-align:center;
		-webkit-align-items: center;
		-moz-align-items: center;
		align-items: center;
	}


	IE6的问题

	1）png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8	

	2）IE6双倍边距bug：在该元素中加入display:inline 或 display:block

	3）为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）

	4）z-index问题 给父级添加position:relative

	.tallBox:after{content: "";display: block;height:0;clear: both;overflow:hidden;visibility: hidden;}

	less是基于javaScript运行环境的；sass：是基于ruby来实现的在服务器端运行的；

    sass:不带{}和css的；

	1变量：

	(sass)$box-color:red;		(less) 为@box_color:red;

	ul{cololr:$box-color;}      ul{cololr:@box_color;}


	2嵌套：
		（1）选择器嵌套  （2）属性嵌套


	3代码重用之继承：

	.class1 {
			border: 1px solid #333;
	}

	.class2 {
	    @extend .class1;
	    background-color: #999;
	}


	4:Mixin混合器

	@mixin left($value: 10px) {
	    float: left;
	    margin-left: $value;
	}

	div{
		@include left(66px);
	}



	4：css继承
		font     text-align:center;  line-height:  word-spacing 



	三：js
	
	-------------------------------------------------

	（1）创建对象  var obj = {}


	（2）批量生产对象：无法识别一个对象的类型

		function People(num1,num2){
			var obj = new Object()
		    obj.name = num1;
		    obj.like = num2;
		    return obj;
		}

		var p1 = People("ton","jick");


	（3）可以使用instanceof操作符检测对象类型  

		function People2(num1,num2){
			this.name= num1;
			this.like= num2;
		}



	 (4)原型模型 

	 People.prototype.age = 12;

	 var p2 = new People2('tom','jiek');

	 var p3 = new People2('hahah','jiek');


	 2：——————

	 string  number boolen undefine null

	 string: 

	 	charAt()  charCodeAt()	concat() length

	 	toString() slice() split()  indexOf()

	array:

	   concat() length slice()   sort()  splice()

    ------------------------------------------------------

	原始数据类型：将变量名和值都存储在栈内存中；

	引用数据类型：将变量名存储在栈内存中，将值存储在堆内存中，并在栈内存中存储值的地址，该地址指向堆内存中的值。

	null表示一个标识被赋值了，且该标识赋值为“空值”,从逻辑角度来看，null值表示空对象指针；

	undefined表示声明了标识，但没有给标识赋值。


	如何复制一个对象的值？

	 var person = {'name':'jack',"age":20,school:'PKU'};

	 function cloneObject(object){
	     var newObject = new Object();
	     for(var i in object){
	         newObject[i] = object[i];
	     }
	     return newObject;
	  }


	隐士类型转换

	数值运算	if   !=  调用方法和属性；


	typeof a


	可以判别标准类型，除了null之外

	typeof 1 返回结果："number" typeof {} 返回结果:"object"

	不能判别具体的对象类型，除了function之外
	typeof [1] 返回结果:"object" typeof function(){} 返回结果:"function"

	a instanceof b

	可以判别内置对象类型

	[] instanceof Array 返回结果：true  new String() instanceof String 返回结果：true

	不能判别原始类型值
	'a' instanceof String 返回结果：false

	可以判别自定义对象类型

	 function Point(x,y){
	         this.x = x;
	         this.y = y
	     }

	 var c = new Point(1,2)
	 c instanceof Point

	返回结果：true;

	a.constructor

		可以判别标准数据类型（undefined和null除外）
		'123'.constructor == String 返回结果：true

		可以判别具体的内置对象类型
		[1,2].constructor == Array 返回结果：true

		可以判别自定义对象类型

		 function Point(x,y){
		     this.x = x;
		     this.y = y
		 }

		 var c = new Point(1,2)
		 c.constructor == Point
		返回结果：true



	1. 函数里的this什么含义，什么情况下，怎么用?

	谁调用的方法或者属性，this就指向谁
	如果没有被谁调用，this指向window


	2. bind,call,apply方法的使用，什么区别？什么时候用?

	call和apply都是改变this的指向的；后边加的参数不同，用来传参

	var a = {
		user:"追梦子",
		fn:function(e,ee){
			console.log(this.user); //追梦子
			console.log(e+ee); //3
		}
	}

	var b = a.fn;
	b.call(a,1,2);
	
	bind方法可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加

	var a = {
		user:"追梦子",
		fn:function(e,d,f){
			console.log(this.user); //追梦子
			console.log(e,d,f); //10 1 2
		}
	}

	var b = a.fn;

	var c = b.bind(a,10);

	c(1,2);


	3. 数组和对象有哪些原生方法，列举一下，分别是什么含义，比如链接两个数组用哪个方法，删除数组的指定项。

		1数组排序

		var a=[1,2,3,4,5,6,7];
		
		var b = a.sort(function(a,b){
			sign = (Math.random()>0.5)?1:-1;
			return (a-b)*sign;
		});

		console.log(b);


		function unique4(array){ 
			array.sort(); 
			var re=[array[0]]; 

			for(var i = 1; i < array.length; i++){ 

				if( array[i] !== re[re.length-1]){ 
					re.push(array[i]); 
				}
			} 

			return re; 
		} 


	原型和原型链区别 作用域链


	作用域：就是变量和函数的可访问的范围；

	作用域链：保证执行环境里函数和变量有序执行；（作用域链只能向上访问，访问到window对象截止）；

	原型：每个对象都会在其内部初始化一个属性，就是__proto__(原型)，当我们访问一个对象的属性时,

	原型链：当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的

	就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象



	事件代理：事件委托，原本需药绑定的事件绑定给父元素，让父元素来实现监听，原理是用冒泡来实现的；可以提高性能；新增的元素也可以；





	每个对象都有 __proto__属性

	每个函数都有.prototype

	用来实现继承；

	function People(a,b){
		this.name = a;
		this.age = b;
	}

	

	People.prototype.country = "china";

	var p1 = new People("tom",12);

	var p2 = new People("jerry",18);

	//继承的东西的；

	function Parent(){
        this.name = 'wang';
    }

    function Child(){
        this.age = 28;
    }

    
    Child.prototype = new Parent();//继承了Parent，通过原型

    var demo = new Child();
    alert(demo.age);
    alert(demo.name);//得到被继承的属性
  


	闭包：

	闭包就是一个函数引用另一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。

	这是优点也是缺点，不必要的闭包只会增加内存消耗。

	或者说闭包就是子函数可以使用父函数的局部变量，还有父函数的参数。

	1一个是可以读取函数内部的变量，2另一个就是让这些变量始终保持在内存中

	
	function a(){

		var n = 0;

		function inc(){
			n++; 
			console.log(n);
		}
		return inc;
	}


	var c = a();

	c();  //控制台输出1

	c();  //控制台输出2

	c();  //控制台输出3



	事件捕获 目标事件  冒泡事件

	
	阻止冒泡：stopPropagation()    //stopPropagation();

	阻止捕获：preventDefault()	  //preventDefault();


	new操作符具体干了什么呢?


	创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型

	属性和方法被加入到 this 引用的对象中
	
	新创建的对象由 this 所引用，并且最后隐式的返回 this


	ajax:

	　Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，

	从服务器获得数据，然后用javascript来操作DOM而更新页面。

	javaScript XMlHttpRequest和DOM


	var xhr = null;

    xhr = new XMLHttpRequest()
    // 2. 连接服务器
    xhr.open('get', url, true)
    // 3. 发送请求
    xhr.send(null);


    // 4. 接受请求

    xhr.onreadystatechange = function(){
        if(xhr.readyState == 4){
            if(xhr.status == 200){
                success(xhr.responseText);
            } else { // fail
                fail && fail(xhr.status);
            }
        }
    }


    跨域解决的问题：

    jsonp	window.name(iframe)  postMessage ('iframe');


    内存泄漏


    闭包使用不当；还有就是那settimeout()第一个为字符串而不是函数;

    webpack 打包工具开发能整合依赖文件和html 和css.js 能使用的；

    amd 和cmd用来模块开发 common.js;

    amd:依赖前置

    cmd:就近依赖


    https://www.cnblogs.com/Zsmile/p/6256651.html

    vue.js-------------------------------------

   
    vue生命周期的理解:

    vue 从创建到销毁的过程，生命周期；

    创建前后  渲染前后  更新前后  销毁前后 

    beforeCreated    数据观测 (data observer) 和 event/watcher 事件配置之前被调用  loading事件

    created   数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。 结束loading和开始请求；

    beforeMount    在挂载开始之前被调用：相关的 render 函数首次被调用。

    mounted        元素el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子

    beforeUpdate  发生在虚拟 DOM 打补丁之前。

    updated      组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。

	beforeDestroy 实例销毁之前调用。在这一步，实例仍然完全可用。   

	destroyed  Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。


	计算属性：计算复杂的逻辑  计算属性是基于它们的依赖进行缓存的。

	计算属性只有在它的相关依赖发生改变时才会重新求值 
	

	<div id="example">
		<p>Original message: "{{ message }}"</p>
		<p>Computed reversed message: "{{ reversedMessage }}"</p>
	</div>

	var vm = new Vue({
			el: '#example',
			data: {
				message: 'Hello'
			},
			computed: {
			    reversedMessage: function () {
			      // `this` 指向 vm 实例
			      return this.message.split('').reverse().join('')
			  	}
			}
	})

	只有message:发生改变时才进行的；有缓存的；




    vue.js-------------------------------------




    define    组件间如何传参:props 来实现的；this.$emit()来实现的；





   	暴露模块    default


   	vue-router组件下的 router-link;

   	在router目录下有个index.js文件，

   	Vue.use(Router)

   	export default new Router({
   		routes:[{
   			path:'user/01',
   			component:Book
   		},{
   			path:'/user/02',
   			component:Music
   		}]

   	})



   	传参的话:id router path上加/:id  使用router对象的promise.id

   	vue-router 导航钩子函数(router-view router-link)
   	

   	router.beforeEach(to,from,next) 作用跳转前进行拦截


   	组件内的钩子


   	单独路由独享组件


   	router.go():前进后退  router.push():导向特殊页面；



   	axios：就是请求的封装的函数的更ajax差不多的；

   	一、Axios 是一个基于 promise 的 HTTP 库，支持promise所有的API

	二、它可以拦截请求和响应

	三、它可以转换请求数据和响应数据，并对响应回来的内容自动转换成 JSON类型的数
	
	四、安全性更高，客户端支持防御 XSRF


   	cnpm install axios  config/index.js进行设置

   	axios.post(‘api/user’)是进行的什么操作 添加用户

   	axios.put(‘api/user/8′)呢	更新用户


   	1:axios是一个基于promise的http库，支持 promise所有的api
   	(promis then() catch())

   	2:他可以拦截请求和响应

   	3：他可以转换请求数据和响应数据，并对响应的数据自动转换json格式

   	4：安全性更高，客户端支持防御xsrf


   	答：

	一、axios.get(url[, config])   //get请求用于列表和信息查询

	二、axios.delete(url[, config])  //删除

	三、axios.post(url[, data[, config]])  //post请求用于信息的添加
	
	四、axios.put(url[, data[, config]])  //更新操作




   	vuex:vue中状态管理，在main.js中引入store,新建一个store

   	vue.js  数据驱动的；通过数据显示试图而不是节点操作；

   	自定义指令

   	全局

   	Vue.directive('focus',{
   		inserted:function(el){
   			el.focus()
   		}
   	})

   	局部

   	directives: {
	  focus: {
	    inserted: function (el) {
	      el.focus()
	    }
	  }
	}


	<input v-focus>

	bind（绑定事件触发只调用一次）、inserted(节点插入的时候触发)、update（组件内相关更新）

	答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，
	在数据变动时发布消息给订阅者，触发相应的监听回调。

	具体步骤：
	第一步：需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter

	这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化

	第二步：compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图

	第三步：Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是:


	1、在自身实例化时往属性订阅器(dep)里面添加自己
	2、自身必须有一个update()方法
	3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。

	第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。
	
	ps：16题答案同样适合”vue data是怎么实现的？”此面试题。


	state getter mutation action module 

	从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程

	beforeCreated ：进行loading事件
	created ：有data数据了 $el还没有； 结束loading事件，异步请求也适宜在这里调用
	beforeMounted:vue实例的$el和data初始化完成。虚拟dom节点 data.message未替换
	mounted:vue实例挂载完成 data.message成功渲染成功
	更新前后：当data变化时，会触发beforeUpdate和updated方法


	vue组件组装过程

	vue.extend()方法创建一个组件，然后使用Vue.component方法注册组件，子组件需要数据
	vue.component()方法注册组件

	mvvm数据绑定：

	通过dom节点的指令获取刷新函数 用来刷新指定的ui；

	实现一个桥接的方法，让刷新函数和需要的数据关联起来；

	监听数据变化，数据改变后通过桥接方法调用刷新函数；

	ui改变触发触发对应的dom事件在改变特定的数据；


	实现observer,重新定义data，为data上每个属性增加setter,getter以监听数据的变化

	实现compile,扫描模版template，提取每个dom节点中的指令信息

	实现directive,通过指令信息是实例化对应的directive实例,不同类型的directive拥有不同的刷新函数update

	实现watcher,让observer的属性监听函数与directive的update函数做一一对应,以实现数据变化后更新视图




	pending: 初始状态, 非 fulfilled 或 rejected.

	fulfilled: 成功的操作.

	rejected: 失败的操作.

	settled: Promise已被fulfilled或rejected，且不是pending


	var promise = new Promise(function(resolve, reject) {

        if (...) {  // succeed

            resolve(result);

        } else {   // fails

            reject(Error(errMessage));

        }
    });


    ___________es6:_______________________


    1:变量声明const和let


    变量提升：
    function aa(){

	    if(bool) {
	    	var test = 'hello man'
	    } else {
	    	console.log(test)
	    }
    }



    function aa() {
	    var test // 变量提升
	    if(bool) {
	    test = 'hello man'
	    } else {
	    //此处访问test 值为undefined
	    console.log(test)
	    }
	    //此处访问test 值为undefined
    }



    变量
    var funcs = []
     for (var i = 0; i < 10; i++) {
         funcs.push(function() { console.log(i) })
     }

     funcs.forEach(function(func) {
         func()
     })






    // ES5告诉我们可以利用闭包解决这个问题
    
    var funcs = []

    for (var i = 0; i < 10; i++) {
        func.push((function(value) {
            return function() {
                console.log(value)
            }
        }(i)))
    }



    // es6利
    for (let i = 0; i < 10; i++) {
        func.push(function() {
            console.log(i)
        })
    }

    2.模板字符串

    ${}


    3.函数

    函数默认参数

     function action(num = 200) {
        console.log(num)
    }
    action() //200
    action(300) //300


    //例如：
    [1,2,3].map( x => x + 1 )
    
    //等同于：
    [1,2,3].map((function(x){
    return x + 1
    }).bind(this))


    4扩展的对象功能

    function() People(name,age){
    	return {
    		name,
    		age
    	};
    }



    const people = {
    	name:'lux',
    	getName:function(){
    		console.log(this.name)
    	}
    }

    

    const people ={
    	name:'lux',
    	getName(){
    		console.log(this.name)
    	}
    }


    5数据结构的访问--结构


     //数组
    const color = ['red', 'blue']
    const [first, second] = color
    console.log(first) //'red'
    console.log(second) //'blue


    6:spread operator：展开运算符

    //数组
    const color = ['red', 'yellow']
    const colorful = [...color, 'green', 'pink']
    console.log(colorful) //[red, yellow, green, pink]


    const first = {
        a: 1,
        b: 2,
        c: 6,
    }
    const second = {
        c: 3,
        d: 4
    }
    const total = { ...first, ...second }
    console.log(total) // { a: 1, b: 2, c: 3, d: 4 }







    7.import 和 export

    import导入模块、export导出模块

    //全部导入
	import people from './example'

	export default people 就用 import people 导入（不带大括号）

	export name 时，就用import { name }导入

	当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } 


	8 Promise

	https://www.jianshu.com/p/c98eb98bd00c

	调方法就是将一个方法func2作为参数传入另一个方法func1中，

	当func1执行到某一步或者满足某种条件的时候才执行传入的参数func2


	pending-进行中

	reolved-已完成

	rejected-已失败


    用同步的方式写异步代码

      fetch('/api/todos')
      .then(res => res.json())
      .then(data => ({ data }))
      .catch(err => ({ err }));


      npm install node-sass --save-dev
	  npm install sass-loader --save-dev

	  {
	  test: /\.scss$/,
	  loaders: ["style", "css", "sass"]
	  },


      -----------------------------------------------------------我要写的东西的-------------------------------------------------------
      (1) 购物车的那种


var vm = new Vue({
	el:'',
	data:{

	},

	created:function(){


	},

	mounted:function(){

	},

	methods:{


	}







})



--------开四核的那种的；----------


vue init webpack my_project;

cd my_project 

cnpm install 


// config.js 种修改那 

proxyTable{
	

}



//------------------------------完善填补的-----------------------------------


css部分：

 水平居中： 

  1text-align:center; 
  2margin:0 auto;
  3position:absolute; transform: translateX(-50%);legt:50%;
  4display:flex; justify-content:center;


  垂直居中：

  line-height:
  line-height:
  图片 line-height:  和图片 vertical-align:middle;
  display:table-cell;  vertical-align: middle;
  position；absolute;top；50%；transform:translateY(-50%);
  display:flex; align-items:center;


  水平垂直居中

  1
  .parent{
  	text-align:center;
  	line-height:500px;
  	font-size:0px;
  }
  .son{
  		vertical-align:middle;
  }

  2
  .parent{
  		display:table-cell;
  		text-align:center;/*如果是行内元素就添加这个*/
  		vertical-align:middle;
  }

  .son{
     margin:0 auto;/*如果是块级元素就添加这个*/
  }


  3:.son{
  		position:absolute;
  		left:50%;
  		top:50%;
  		transform:translate(-50%,-50%);
  }

  4:

  #son{
	    position: absolute;
	    margin: auto;
	    width: 100px;
	    height: 50px;
	    top: 0;
	    bottom: 0;
	    left: 0;
	    right: 0;
	}

	5:


	.parent{
		display:flex;
	}

	.son{
		margin:auto;
	}

	.parent{
		display:flex;
		justify-content:center;
		alitem:center;
	}




	0-0----------------------

	左列定宽，右侧自适应

	1种

	.left{
		width:200px;
		height:500px;
		float:left;
	}


	.right{
		margin-left:200px;

	}

	2种

	.right{
	 	overflow:hidden;
	}

	3种

	#parent{
		width: 100%;
		display: table;
		height: 500px;
	}

	#left,#right{
		display: table-cell;  /*利用单元格自动分配宽度*/
	}

	#left {
		width: 100px;
		background-color: #f00;
	}

	#right {
		background-color: #0f0;
	}

	4种

	#parent{
		position: relative;  /*子绝父相*/
	}

	#left {
		position: absolute;
		top: 0;
		left: 0;
		background-color: #f00;
		width: 100px;
		height: 500px;
	}

	#right {
		position: absolute;
		top: 0;
		left: 100px;  /*值大于等于#left的宽度*/
		right: 0;
		background-color: #0f0;
		height: 500px;
	}

	5

	#parent{
		width: 100%;
		height: 500px;
		display: flex;
	}

	#left {
		width: 100px;
		background-color: #f00;
	}

	#right {
		flex: 1; /*均分了父元素剩余空间*/
		background-color: #0f0;
	}


	0-0----------------------

	一列不定，一列自适应

	1：
	(1)使用float+overflow实现

	(2) 一列不管  另一列+flex；1;


	0-0----------------------

	两侧定宽，中间自适应：双飞翼布局

	第一种布局

	#header {
		height: 60px;
		background-color: #ccc;
	}

	#center {
		height: 500px;
		float: left;
		width: 100%;
		background-color: #eeff2b;
	}

	#center_inbox{
		height: 480px;
		border: 1px solid #000;
		margin: 0 220px 0 120px;  /*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*/
	}

	#left {
		float: left;
		width: 100px;
		height: 500px;
		margin-left: -100%; /*调整#left的位置,值等于自身宽度*/
		background-color: #f00;
		opacity: 0.5;
	}
	
	#right {
		float: left;
		width: 200px;
		height: 500px;
		margin-left: -200px;  /*使right到指定的位置,值等于自身宽度*/
		background-color: #0f0;
		opacity: 0.5;
	}

	第二种布局

	#header{
		height: 60px;
		background-color: #ccc;
	}

	#parent {
		box-sizing: border-box;
		height: 500px;
		padding: 0 215px 0 115px;  /*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*/
	}

	#left {
		margin-left: -100%;  /*使#left上去一行*/
		position: relative;
		left: -115px;  /*相对定位调整#left的位置,正值大于或等于自身宽度*/
		float: left;
		width: 100px;
		height: 500px;
		background-color: #f00;
		opacity: 0.5;
	}

	#center {
		float: left;
		width: 100%;  /*由于#parent的padding,达到自适应的目的*/
		height: 500px;
		box-sizing: border-box;
		border: 1px solid #000;
		background-color: #eeff2b;
	}

	#right {
		position: relative;
		left: 215px; /*相对定位调整#right的位置,大于或等于自身宽度*/
		width: 200px;
		height: 500px;
		margin-left: -200px;  /*使#right上去一行*/
		float: left;
		background-color: #0f0;
		opacity: 0.5;
	}


	flex{

	}

	0-0----------------------

	多列布局

	(1)使用float实现

	(2)使用table实现

	(3)flex布局

	全屏布局

	<div id="parent">
		<div id="top">top</div>
		<div id="left">left</div>
		<div id="right">right</div>
		<div id="bottom">bottom</div>
	</div>

	html, body, #parent {height: 100%;overflow: hidden;}

	#parent > div {
		border: 1px solid #000;
	}

	#top {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 100px;
	}

	#left {
		position: absolute;
		top: 100px;  /*值大于等于#top的高度*/
		left: 0;
		bottom: 50px;  /*值大于等于#bottom的高度*/
		width: 200px;
	}


	#right {
		position: absolute;
		overflow: auto;
		left: 200px;  /*值大于等于#left的宽度*/
		right: 0;
		top: 100px;  /*值大于等于#top的高度*/
		bottom: 50px;  /*值大于等于#bottom的高度*/
	}

	#bottom {
		position: absolute;
		left: 0;
		right: 0;
		bottom: 0;
		height: 50px;
	}


	跨域的问题

	https://zhuanlan.zhihu.com/p/28562290

1:DOM的同源策略：禁止对不同源页面的DOM进行操作。

这里主要的场景是iframe跨域的情况，不同域名的iframe是限制的相互访问；


2：XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起
http请求。



 //readyState是用来标识当前XMLHttpRequest对象处于什么状态；

  0    未初始化状态：此时，已经创建了一个XMLHttpRequest对象

  1  准备发送状态：此时，已经调用了XMLHttpRequest对象的open方法，并且XMLHttpRequest对象已经准备好将一个请求发送到服务器端

  2  已经发送状态：此时，已经通过send方法把一个请求发送到服务器端，但是还没有收到一个响应

  3  正在接收状态：此时，已经接收到HTTP响应头部信息，但是消息体部分还没有完全接收到

  4  完成响应状态：此时，已经完成了HTTP响应的接收


 //status 是表示响应的HTTP的状态码；

  1XX    服务器收到请求，需要继续处理。例如101状态码，表示服务器将通知客户端使用更高版本的HTTP协议。

  2XX    请求成功。例如200状态码，表示请求所希望的响应头或数据体将随此响应返回。

  3XX    重定向。例如302状态码，表示临时重定向，请求将包含一个新的URL地址，客户端将对新的地址进行GET请求。

  4XX    客户端错误。例如404状态码，表示客户端请求的资源不存在。

  5XX    服务器错误。例如500状态码，表示服务器遇到了一个未曾预料的情况，导致了它无法完成响应，一般来说，这个问题会在程序代码出错时出现。


  	GET请求：

  	var xhr  = null;

	xhr  = new XMLHttpRequest();

	xhr.open('GET','url',true);

	xhr.send(null);

	xhr.onreadystatechange = function(){

		if(xhr.readyState ==4&&xhr.status ==200){
			console.log(response.Text)
		}

	}




	POST请求：

	使用post来进行的；

	无法使用缓存文件（更新服务器上的文件或数据库）
	向服务器发送大量数据（POST 没有数据量限制）
	发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠




	向请求添加 HTTP 头。setRequestHeader('Content-type',"application/x-www-form-urlencoded") 














jsonp: 

动态的创建 script 标签来的 (只能进行 get请求)


	首先全局注册一个callback回调函数，记住这个函数名字（比如：resolveJson），这个函数接受一个参数，参数是期望的到的服务端返回数据，函数的具体内容是处理这个数据。


	function resolveJosn(result) {
		console.log(result.name);
	}


	
	var jsonpScript= document.createElement("script");
	jsonpScript.type = "text/javascript";
	jsonpScript.src = "https://www.qiute.com?callbackName=resolveJson";
	document.getElementsByTagName("head")[0].appendChild(jsonpScript);


document.domain:

	document.domain = 'qiutc.me';

	function onLoad() {
		var iframe =document.getElementById('iframe');
		var iframeWindow = iframe.contentWindow; // 这里可以获取 iframe 里面 window 对象并且能得到方法和属性
		var doc = iframeWindow.document; // 获取到
	}

	<iframe src="https://www.qiutc.me/b.html" onload="onLoad()"</iframe>

	// iframe 里面的页面
	<script>
	document.domain = 'qiutc.me';
	</script>



	window.name:


	<!DOCTYPE html>
	<html lang="en">
	<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<script>
	function getData() {
	var iframe =document.getElementById('iframe');
	iframe.onload = function() {
	var data = iframe.contentWindow.name; // 得到
	}
	iframe.src = 'b.html';  // 这里b和a同源
	}
	</script>
	</head>
	<body>
	<iframe src="https://www.qiutc.com/data.html" style="display:none" onload="getData()"</iframe>
	</body>
	</html>






































	











	











   	



























	














